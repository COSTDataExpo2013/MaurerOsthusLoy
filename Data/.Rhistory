str(pcp.dat)
pcp.dat
pcp.dat <- as.data.frame(pcp.dat)
pcp.dat
pcp.dat$id <- rownames(pcp.dat)
pcp.dat
ggparcoord(data = pcp.dat, columns = 1:5)
ggparcoord(data = pcp.dat, columns = 1:5, colour = id)
?ggparcoord
ggparcoord(data = pcp.dat, columns = 1:5, groupColumn = id)
str(pcp.dat)
diamonds.samp <- diamonds[sample(1:dim(diamonds)[1],100),]
gpd <- ggparcoord(data = diamonds.samp,columns = c(1,5:10),groupColumn = 2)
gpd
head(diamonds)
ggparcoord(data = pcp.dat, columns = 1:5, groupColumn = 6)
scale_colour_brewer(palette = "Set1")
ggparcoord(data = pcp.dat, columns = 1:5, groupColumn = 6) +#
scale_colour_brewer(palette = "Set1")
ggparcoord(data = pcp.dat, columns = 1:5, groupColumn = 6) +#
scale_colour_brewer(palette = "Set2")
ggparcoord(data = pcp.dat, columns = 1:5, groupColumn = 6) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = c(1,2,5,3,4), groupColumn = 6) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, width = 2) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, linewidth = 2) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, size = 2) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = 1:5, order = "allClass" groupColumn = 6, size = 2) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = 1:5, order = "allClass", groupColumn = 6, size = 2) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = 1:5, order = "allClass", groupColumn = 6) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, size = 2, mapping = aes(size = 2)) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = diamonds.samp,columns = c(1,5:10),groupColumn = 2,#
title="Parallel Coord. Plot of Diamonds Data",mapping = aes(size = 1))
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, mapping = aes(size = 2)) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, mapping = aes(size = 1)) +#
scale_colour_brewer(palette = "Set3")
dat <- read.csv("~/Desktop/LCAFiveQuestionGroup.csv")#
#
pcp.dat <- t(dat[,-1])#
colnames(pcp.dat) <- dat[,1]#
pcp.dat <- as.data.frame(pcp.dat)#
pcp.dat$Class <- 1:6
pcp.dat
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, mapping = aes(size = 1)) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, mapping = aes(size = 1))
dat <- read.csv("~/Desktop/LCAFiveQuestionGroup.csv")#
#
pcp.dat <- t(dat[,-1])#
colnames(pcp.dat) <- dat[,1]#
pcp.dat <- as.data.frame(pcp.dat)#
pcp.dat$Class <- factor(1:6)#
#
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, mapping = aes(size = 1)) +#
scale_colour_brewer(palette = "Set3")
?ggparcoord
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, mapping = aes(size = 1), scale="center") +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, mapping = aes(size = 1)) +#
scale_colour_brewer(palette = "Set3")
?ggparcoord
gpd <- ggparcoord(data = msleep, columns = 6:11, groupColumn = "vore", missing =#
"random", scale = "uniminmax")
gpd
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, #
mapping = aes(size = 1), scale = "uniminmax") +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, #
mapping = aes(size = 1)) +#
scale_colour_brewer(palette = "Set3")
ggparcoord(data = pcp.dat, columns = c(1,2,5,4,3), groupColumn = 6, #
mapping = aes(size = 1), scale = "uniminmax") +#
scale_colour_brewer(palette = "Set3")
library(reshapeGUI)
library(fries)
data(fries)
data(frenchfries)
library(plyr)
data(frenchfries)
library(fries)
reshapeGUI()
boxcox
library(boxcox)
library(MASS)
?boxcox
boxcox(Volume ~ log(Height) + log(Girth), data = trees,#
lambda = seq(-0.25, 0.25, length = 10))
j <- boxcox(Volume ~ log(Height) + log(Girth), data = trees,#
lambda = seq(-0.25, 0.25, length = 10))
str(j)
j$x[which.max(j$y)]
?merge
library(Exam)
library(mlmRex)
library(mlmRev)
?Exam
help(package=Exam)
help(package=mlmRev)
?Exam
library(mlmRev)
2^5
2^4
q("no")
library(car)
?qqPlot
qqPlot
?qqPlot
417*10
2^4
144^.5
7^2
help(package=lattice)
library(MEMSS)
?Dialyzer
chase <- 525.79
citi <- 172.59 + 20
cap1 <- 276.52
wf <- 125.74
sum(chase, citi, cap1, wf)
sum(chase, citi, cap1, wf) + 805
sum(chase, citi, cap1, wf) + 805 + 1172.21
sum(chase, citi, cap1, wf) + 805 + 1172.21 + 188
sum(chase, citi, cap1, wf) + 805 + 1172.21 + 188 + 100
sum(chase, citi, cap1, wf) + 805 + 1172.21 + 188 + 100 - 2698.86
log10
log10(0:5)
library(HLMdiag)
?cooks.distance.mer
data(sleepstudy, package = 'lme4')#
ss <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)#
#
# Cook's distance for individual observations#
ss.cd.lev1 <- cooks.distance(ss)
data("Exam", package = "mlmRev")
fm4 <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + sex + #
schgend + schavg + (standLRT | school), #
data = Exam, REML = FALSE)
cooksd_fm4  <- cooks.distance(fm4, group = "school")
library("HLMdiag")  # note that this will load lme4#
library("nullabor") # used to construct lineups#
library("plyr")     # used to construct school-level data set#
#
## The Exam example is bundled with mlmRev#
data("Exam", package = "mlmRev")#
head(Exam)
fm4 <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + sex + #
schgend + schavg + (standLRT | school), #
data = Exam, REML = FALSE)#
## Extract level-2 EB residuals#
resid2_fm4 <- HLMresid(fm4, level = "school")
cooksd_fm4  <- cooks.distance(fm4, group = "school")
Load packages#
library(ggplot2)   # for plotting#
library(grid)      # for plotting#
library(maps)      # for MN map#
library(nullabor)  # for lineup#
library(HLMdiag)   # for Q-Q plots#
library(plyr)      # for data manipulation#
library(reshape2)  # for data manipulation#
library(stringr)   # for string manipulation#
#
## Read in the data#
radon.data <- read.csv("original_radon.csv")#
srrs2 <- read.table ("srrs2.dat", header=T, sep=",")#
#
## Restrict attention to Minnesota#
mn <- subset(srrs2, state=="MN")
fm <- lmer(log.radon ~ basement + uranium + (basement | county), data = radon.data, REML = FALSE)
519.60 + 90 + 264.67
1000 - 519.60 + 90 + 264.67
1000 - (519.60 + 90 + 264.67)
192.59 + 525.79 + 125.74
192.59 + 525.79 + 125.74 + 100
192.59 + 525.79 + 125.74 + 100 + 1742.1
192.59 + 525.79 + 125.74 + 100 + 1742.1 + 188
192.59 + 525.79 + 125.74 + 100 + 1742.1 + 188 + 54
192.59 + 525.79 + 125.74 + 100 + 1742.1 + 188 + 54 + 100
192.59 + 525.79 + 125.74 + 100 + 1172.21 + 188 + 54 + 100
pbinom(7, 70, .5)
pbinom(11, 73, .5)
choose(73, 11) * .5^11 * (.5^73)
pbinom(11, 73, .5, lower.tail = F)
pbinom(12, 73, .5, lower.tail = F)
pbinom(12, 73, .5, lower.tail = T)
?pbinom
sum(pbinom(1:10, 73, .5))
1 - sum(pbinom(1:10, 73, .5))
1 - sum(dbinom(1:10, 73, .5))
dbinom(1:10, 73, .5)
pbinom(1:10, 73, .5)
choose(73, 11) * .5^11 * (.5^62)
sum(pbinom(1:10, 73, 1/20))
sum(dbinom(1:10, 73, 1/20))
1 - sum(dbinom(1:10, 73, 1/20))
1 - sum(dbinom(1:6, 70, 1/20))
1 - sum(dbinom(1:8, 65, 1/20))
1 - sum(pbinom(1:8, 65, 1/20))
?dbinom
dbinom(8, 65, 1/20))
dbinom(8, 65, 1/20)
1 - dbinom(8, 65, 1/20)
1 - sum(pbinom(1:8, 65, 1/20))
1 - sum(dbinom(1:8, 65, 1/20))
?dbinom
1 - sum(dbinom(0:8, 65, 1/20))
1 - sum(dbinom(0:10, 73, 1/20))
1 - sum(dbinom(0:11, 73, 1/20))
sum(dbinom(11:73, 73, 1/20))
sum(dbinom(7:70, 70, 1/20))
sum(dbinom(8:70, 70, 1/20))
sum(dbinom(11:73, 73, 1/20))
sum(dbinom(3:10, 10, 1/20))
sum(dbinom(4:10, 10, 1/20))
sum(dbinom(3:10, 10, 1/20))
sum(dbinom(4:10, 10, 1/20))
Preliminaries#
library(lme4)#
library(MASS)#
library(RcppEigen)#
library(inline)#
library(nortest)#
library(reshape2)#
#
# Readingin the data#
radon <- read.csv("original_radon.csv")#
#
### Loading self-written functions#
source('cpp_functions.R')#
source('utility_functions.R')#
tr2 <- function(.mod, .L, s = NULL){#
y <- .mod@y#
X <- getME(.mod, "X")#
Z <- BlockZ(.mod)#
n <- nrow(X)#
p <- ncol(X)#
ngrps <- unname( summary(.mod)@ngrps )#
vc <- VarCorr(.mod)#
Di <- bdiag( VarCorr(.mod) ) / (unname(attr(vc, "sc")))^2#
D  <- kronecker( Diagonal(ngrps), Di )#
Aslot <- .mod@A # ZDZ'#
zdzt <- crossprod( .mod@A )#
V  <- Diagonal( n ) + zdzt#
V.chol <- chol( V )#
Vinv  <- chol2inv( V.chol ) #
XVXinv <- solve( t(X) %*% Vinv %*% X )#
VinvX  <- Vinv %*% X#
M      <- VinvX %*% XVXinv %*% t(VinvX)#
P      <- cxxmatsub(as.matrix(Vinv), as.matrix(M))#
pzdl <- P %*% Z %*% D %*% .L#
A <- crossprod( pzdl )#
B <- t(.L) %*% D %*% t(Z) %*% P %*% Z %*% D %*% .L ## diagnostic se#
W <- try( HLMdiag:::mcrotate(A, B, s) )#
if( class(W) == "try-error") {W <- NA} else {W <- as.matrix(W)}#
if(is.matrix(W)){#
A <- as.matrix(A)#
B <- as.matrix(B)#
return( sum( diag( solve( t(W) %*% B %*% W ) %*% ( t(W) %*% A %*% W ) ) ) )#
} else{#
return(NA)#
}           #
}#
### Fitted model#
fm <- lmer(log.radon ~ basement + uranium + (basement | county), data = radon)#
#
ngrps <- summary(fm)@ngrps#
L.b0  <- kronecker(Diagonal(ngrps), c(1, 0))#
L.b1  <- kronecker(Diagonal(ngrps), c(0, 1))#
### Initial fraction of confounding#
tr2(fm, L.b0) / 85 # 0.72#
tr2(fm, L.b1) / 85  # 0.70#
### Reducing the trace#
reduced.tr <- data.frame(s = seq(30, 85, by = 1), b0 = NA, b1 = NA)#
#
for(i in seq( nrow(reduced.tr) )){#
reduced.tr[i, "b0"] <- tr2(.mod = fm, .L = L.b0, s = reduced.tr[i, "s"])#
reduced.tr[i, "b1"] <- tr2(.mod = fm, .L = L.b1, s = reduced.tr[i, "s"])#
}#
#
# adding results from the AD test of the rotated residuals#
reduced.tr.melt <- melt(reduced.tr, id.vars=1, variable.name="ranef")#
reduced.tr.melt$p.value <- NA#
for(i in 1:nrow(reduced.tr.melt)) {#
if(reduced.tr.melt[i,"ranef"] == "b0"){#
rot <- mcresid2(fm, .L = L.b0, s = reduced.tr.melt[i,"s"], .varimax=TRUE)#
} else{#
rot <- mcresid2(fm, .L = L.b1, s = reduced.tr.melt[i,"s"], .varimax=TRUE)#
}#
ad.result <- ad.test(rot)#
reduced.tr.melt$p.value[i] <- ad.result$p.value#
}#
#
reduced.tr.melt$ad.reject <- reduced.tr.melt$p.value < .05
library(nlme)
?lme
fm1 <- lme(distance ~ age, data = Orthodont) # random is ~ age
anova(fm1)
args(anova)
?anova.lme
anova(fm1, type = "marginal")
options(contrasts = c("contr.treatment", "contr.poly"))#
fm1BW.lme <- lme(weight ~ Time * Diet, BodyWeight,#
random = ~ Time)
fm1BW.lme
summary(fm1BW.lme)
anova(fm1BW.lme)
anova(fm1BW.lme, type = "marginal")
detach(package:nlme)
library(lme4)
?lmer
(fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
fm1
anova(fm1)
?anova.lmer
anova(fm1, type = "marginal")
anova(fm1, type = "sequential")
?lmer
library(nlme)
fm1PBIB <- lme( response ~ Treatment, data = PBIB, random = ~ 1 )
library(MESS)
library(MEMSS)
fm1PBIB <- lme( response ~ Treatment, data = PBIB, random = ~ 1 )
data("PBIB")
m <- matrix(1:9, nrow = 3, ncol = 3)
m
v <- 1:3
v
v %*% m
m %*% v
v %*% m %*% v
t(v)
library(boot)
help(package=boot)
?ci.boot
boot.ci
?boot.ci
citi <- 98
cap1 <- 847.07
chase <- 811.97
amex <- 1303.66
sum(citi, cap1, chase, amex)
sum(citi, cap1, chase, amex, 805, 188, 100, 55)
stat105 = mean(c(4.58, 4.32, 4.76))
stat101 = mean(c(4.42, 4.4, 4.66, 4.33))
stat105
stat101
1341.07 * .6
1940.86 - 759 - 1000
1940.86 - 759 - 1000 + 909.20
wellfargo <- 934.92
chase <- 437.10
citi <- 787.12
cap1 <- 309
sum(wellfargo, chase, citi, cap1)
161.47 * 12
108.26 * 12
59.28 * 12
Set-up ####
library(GGally)#
library(reshape2)#
library(ggplot2)#
library(lubridate)#
library(stringr)#
library(maps)#
library(map_tools)#
library(mapproj)#
library(lattice)
dir()
setwd("Dropbox/JSM Data Expo 2013 (2)/")
dat <- read.csv("Data/AllYearsAllData.csv",header=T)
cityyearagg <- read.csv("Data/cityyearagg.csv",header=T)
cityagg <- read.csv("Data/cityagg.csv",header=T)
library(maps)#
    library(maptools)#
    data(us.cities)#
    akhi <- which (us.cities$country.etc=="AK"| us.cities$country.etc=="HI" |#
                 us.cities$country.etc=="ma")#
    us.cities <- us.cities[-akhi,]#
    states <- map_data("state")
DetColor <- "#66C2A5" # "midnightblue"#
MilColor <- "#FC8D62" # "darkred"#
StaColor <- "#8DA0CB" # "darkgreen"#
BilColor <- "#E78AC3" # "darkmagenta"#
othercity <- "gray"#
citycolors <- c(othercity,BilColor,DetColor,MilColor,StaColor)
bildata <- dat[which(dat$city=="Biloxi, MS"),]
binnedtheme <- theme_bw()+theme(axis.line = element_blank(), legend.position = "none")
Adam: Poster plot here ### #
bildata <- dat[which(dat$city=="Biloxi, MS"),]#
sort(unique(bildata$economy))#
#choose bins accordingly#
lowcolor <- "#FFF3FB"#
x <- "economy"#
y <- "comAttach"#
xbin <- 1/3#
ybin <- 1/3#
xstart <- 1#
ystart <- 1#
xend <- 3#
yend <- 5  #
BinnedEconBiloxiYears <- binwsurveywgtsyears(bildata, x, y, xbin, ybin, xstart, xend, ystart, yend)#
qplot(binnedx, binnedy, geom="tile", fill=weightedfill,#
      data=BinnedEconBiloxiYears, facets= . ~ year) +#
  scale_fill_gradient(low=lowcolor, high=BilColor) +#
  xlab("Economic Score") + ylab("Community Attachment Score") +#
#  ggtitle("Binned Scatterplot for Biloxi Residents (using survey weights)") + #
  binnedtheme + #
  coord_fixed() + #
  theme(text = element_text(size=12))
binning function for binned scatterplots#
binwsurveywgtsyears <- function(dat, x, y, xbin, ybin, xstart, xend, ystart, yend){#
  dat$binnedx <- rep(NA, nrow(dat))#
  dat$binnedy <-  rep(NA, nrow(dat))#
  # bin the x's#
  xcenters <- seq(xstart, xend, xbin)#
  xlower <- seq(xstart-.5*xbin, xend-.5*xbin, xbin)#
  for (i in 1:length(xcenters)){#
    dat$binnedx[which(dat[,which(names(dat)==x)] > xlower[i])] <- xcenters[i]   #
  }#
  ycenters <- seq(ystart, yend, ybin)#
  ylower <- seq(ystart-.5*ybin, yend-.5*ybin, ybin)#
  for (i in 1:length(ycenters)){#
    dat$binnedy[which(dat[,which(names(dat)==y)] > ylower[i])] <- ycenters[i]   #
  }  #
  yearwgts <- ddply(dat,.(year),summarise,#
                    weightedfill = sum(svywt))#
  outdat <-ddply(dat,.(binnedx,binnedy,year),summarise,#
                 weightedfill = sum(svywt))#
  for(i in 2008:2010){#
  outdat$weightedfill[outdat$year == i] <- outdat$weightedfill[outdat$year == i] / yearwgts$weightedfill[yearwgts$year==i]#
  }#
  return(outdat)#
}
bildata <- dat[which(dat$city=="Biloxi, MS"),]#
sort(unique(bildata$economy))#
#choose bins accordingly#
lowcolor <- "#FFF3FB"#
x <- "economy"#
y <- "comAttach"#
xbin <- 1/3#
ybin <- 1/3#
xstart <- 1#
ystart <- 1#
xend <- 3#
yend <- 5  #
BinnedEconBiloxiYears <- binwsurveywgtsyears(bildata, x, y, xbin, ybin, xstart, xend, ystart, yend)#
qplot(binnedx, binnedy, geom="tile", fill=weightedfill,#
      data=BinnedEconBiloxiYears, facets= . ~ year) +#
  scale_fill_gradient(low=lowcolor, high=BilColor) +#
  xlab("Economic Score") + ylab("Community Attachment Score") +#
#  ggtitle("Binned Scatterplot for Biloxi Residents (using survey weights)") + #
  binnedtheme + #
  coord_fixed() + #
  theme(text = element_text(size=12))
qplot(binnedx, binnedy, geom="tile", fill=weightedfill,#
      data=BinnedEconBiloxiYears, facets= . ~ year) +#
  scale_fill_gradient(low=lowcolor, high=BilColor) +#
  xlab("Economic Score") + ylab("Community Attachment Score") +#
#  ggtitle("Binned Scatterplot for Biloxi Residents (using survey weights)") + #
  binnedtheme + #
  coord_fixed() + #
  theme(text = element_text(size=12))
qplot(binnedx, binnedy, geom="tile", fill=weightedfill,#
      data=BinnedEconBiloxiYears, facets= . ~ year) +#
  scale_fill_gradient(low=lowcolor, high=BilColor) +#
  xlab("Economic Score") + ylab("Community Attachment Score") +#
#  ggtitle("Binned Scatterplot for Biloxi Residents (using survey weights)") + #
  binnedtheme + #
  coord_fixed() + #
  theme(text = element_text(size=14))
qplot(binnedx, binnedy, geom="tile", fill=weightedfill,#
      data=BinnedEconBiloxiYears, facets= . ~ year) +#
  scale_fill_gradient(low=lowcolor, high=BilColor) +#
  xlab("Economic Score") + ylab("Community Attachment Score") +#
#  ggtitle("Binned Scatterplot for Biloxi Residents (using survey weights)") + #
  binnedtheme + #
  coord_fixed() + #
  theme(text = element_text(size=16))
qplot(binnedx, binnedy, geom="tile", fill=weightedfill,#
      data=BinnedEconBiloxiYears, facets= . ~ year) +#
  scale_fill_gradient(low=lowcolor, high=BilColor) +#
  xlab("Economic Score") + ylab("Community Attachment Score") +#
#  ggtitle("Binned Scatterplot for Biloxi Residents (using survey weights)") + #
  binnedtheme + #
  coord_fixed() + #
  theme(text = element_text(size=16))
ggsave("BinnedEconBiloxiYears.eps", width = 7, height = 4, units = "in")
detdata <- dat[which(dat$city=="Detroit, MI"),]#
sort(unique(detdata$socialCap))#
x <- "socialCap"#
y <- "comAttach"#
xbin <- 1/4#
ybin <- 1/3#
xstart <- 1#
ystart <- 1#
xend <- 5#
yend <- 5  #
lowcolor <- "#E9FFF9"#
BinnedEconDetriotYears <- binwsurveywgtsyears(detdata, x, y, xbin, ybin, xstart, xend, ystart, yend)
qplot(binnedx, binnedy, geom="tile", fill=weightedfill,#
      data=BinnedEconDetriotYears, facets= . ~ year) +#
  scale_fill_gradient(low=lowcolor, high=DetColor) +#
  xlab("Social Capital Score") + ylab("Community Attachment Score") +#
#  ggtitle("Binned Scatterplot for Detroit Residents (using survey weights)") + #
  binnedtheme + #
  coord_fixed() + #
  theme(text = element_text(size=16))
ggsave("BinnedSocialCapDetriotYears.eps", width = 7, height = 4, units = "in")
mildata <- dat[which(dat$city=="Milledgeville, GA"),]#
sort(unique(mildata$economy))#
#choose bins accordingly#
x <- "economy"#
y <- "comAttach"#
xbin <- 1/3#
ybin <- 1/3#
xstart <- 1#
ystart <- 1#
xend <- 3#
yend <- 5  #
lowcolor <- "#FFF8F5"#
BinnedEconMilledgevilleYears <- binwsurveywgtsyears(mildata, x, y, xbin, ybin, xstart, xend, ystart, yend)#
qplot(binnedx, binnedy, geom="tile", fill=weightedfill,#
      data=BinnedEconMilledgevilleYears, facets= . ~ year) +#
  scale_fill_gradient(low=lowcolor, high=MilColor) +#
  xlab("Economic Score") + ylab("Community Attachment Score") +#
#  ggtitle("Binned Scatterplot for Milledgeville Residents (using survey weights)") + #
  binnedtheme + #
  coord_fixed() + #
  theme(text = element_text(size=16))
ggsave("BinnedEconMilledgevilleYears.eps", width = 7, height = 4, units = "in")
scdata <- dat[which(dat$city=="State College, PA"),]#
sort(unique(scdata$aesthetic))#
x <- "aesthetic"#
y <- "comAttach"#
xbin <- 1/2#
ybin <- 1/3#
xstart <- 1#
ystart <- 1#
xend <- 3#
yend <- 5  #
lowcolor <- "#EFF4FF"#
BinnedEconSCYears <- binwsurveywgtsyears(scdata, x, y, xbin, ybin, xstart, xend, ystart, yend)#
qplot(binnedx, binnedy, geom="tile", fill=weightedfill,#
      data=BinnedEconSCYears, facets= . ~ year) +#
  scale_fill_gradient(low=lowcolor, high=StaColor) +#
  xlab("Aesthetics Score") + ylab("Community Attachment Score") +#
#  ggtitle("Binned Scatterplot for State College Residents (using survey weights)") + #
  binnedtheme + #
  coord_fixed() + #
  theme(text = element_text(size=16))
ggsave("BinnedAestheticSCYears.eps", width = 7, height = 4, units = "in")
setwd("Data/")
alldat<-read.csv("AllYearsAllData.csv")
fix race groups#
alldat$race<-as.character(alldat$race)#
alldat[alldat$race=="(Hispanic)",]$race<-"Hispanic"#
alldat[alldat$race=="Don't know",]$race<-"Don't Know"#
alldat[alldat$race=="(DK)",]$race<-"Don't Know"#
alldat$raceanswer<-alldat$race#
alldat[alldat$race %in% c("(NA)","Don't Know","Refused"),]$raceanswer<-"No"#
alldat$race<-as.factor(alldat$race)#
alldat$raceanswer<-as.factor(alldat$raceanswer)
library(ggplot2)#
library(reshape2)#
library(plyr)#
library(GGally)#
library(reshape)#
library(lubridate)#
library(stringr)#
library(maps)#
library(maptools)#
library(gridExtra)#
library(scales)
Proximity to friends is more important that proximity to family when it comes to community attachment. Regardless of how many family members are close to you, if few friends are close to you your community attachment, on average, is below the mean. If all or nearly all your close friends live near you, regardless of how many family members live near you, your community attachment level is above the mean#
goodlevelsfam<-setdiff(levels(alldat$closeFam),c("(DK)","(Refused)"))#
goodlevelsfriends<- setdiff(levels(alldat$closeFriends),c("(DK)","(Refused)"))#
closefriends1<-subset(alldat,closeFam %in% goodlevelsfam & closeFriends %in% goodlevelsfriends)#
closefriends1[closefriends1$closeFam=="Most, OR",]$closeFam<-"Most"#
closefriends1[closefriends1$closeFriends=="Most, OR",]$closeFriends<-"Most"#
closefriends1$closeFam<-factor(closefriends1$closeFam)#
closefriends1$closeFriends<-factor(closefriends1$closeFriends)#
closefriends2<-ddply(closefriends1,.(closeFam,closeFriends),summarise,comattach=sum(svywt*comAttach,na.rm=T)/sum(svywt,na.rm=T),count=sum(svywt,na.rm=T))#
famorder<-c(1,5,2,4,3)#
closefriends2$closeFam<-factor(closefriends2$closeFam,levels=levels(closefriends2$closeFam)[famorder])#
friendorder<-c(1,5,2,4,3)#
closefriends2$closeFriends<-factor(closefriends2$closeFriends,levels=levels(closefriends2$closeFriends)[friendorder])#
## Here is where you can change the colors selected#
cols<-brewer.pal(5,"YlOrBr")#
midpt<-mean(closefriends2$comattach)#
# pdf("friendsAndFamilyPlusComAttach.pdf",height=7,width=7)#
qplot(closeFriends,closeFam,geom="tile",fill=comattach,data=closefriends2,xlab="How many of your close friends live in your community?",ylab="How much of your family lives in this area?")+scale_fill_gradient2("Community\nAttachment", low="#A6D854",high="#FFD92F",midpoint=midpt)+theme_bw()+theme(legend.position="bottom")
ggsave("friendsAndFamilyPlusComAttach.eps", height = 5.1, width = 5.1)
ggsave("friendsAndFamilyPlusComAttach.eps", height = 5.25, width = 5.25)
